#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;time.h&gt;

int no_of_resources,
no_of_processes;
int *resources;
int **allocated;

int **maxr;
int **need;
int *safeSeq;
int ran = 0;

pthread_mutex_t lock;
pthread_cond_t cond;

bool safaseq();
void* p_code(void* );

void Need()
{
need = (int **)malloc(no_of_processes * sizeof(*need));
for(int i=0; i&lt;no_of_processes; i++)
need[i] = (int )malloc(no_of_resources * sizeof(*need));

for(int i=0; i&lt;no_of_processes; i++)
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdbool.h&gt;
#include &lt;time.h&gt;

int no_of_resources,
no_of_processes;
int *resources;
int **allocated;

int **maxr;
int **need;
int *safeSeq;
int ran = 0;

pthread_mutex_t lock;
pthread_cond_t cond;

bool safaseq();
void* p_code(void* );

void Need()
{
need = (int **)malloc(no_of_processes * sizeof(*need));
for(int i=0; i&lt;no_of_processes; i++)
need[i] = (int )malloc(no_of_resources * sizeof(*need));

for(int i=0; i&lt;no_of_processes; i++)
for(int j=0; j&lt;no_of_resources; j++)
need[i][j] = maxr[i][j] - allocated[i][j];

safeSeq = (int *)malloc(no_of_processes * sizeof(*safeSeq));
for(int i=0; i&lt;no_of_processes; i++) safeSeq[i] = -1;

if(!safaseq()) {
printf(&quot;\nThe processes leads the system to a unsafe state.\n\n&quot;);
exit(-1);
}

printf(&quot;\n\nSafe Sequence Found : &quot;);
for(int i=0; i&lt;no_of_processes; i++) {
printf(&quot;%-3d&quot;, safeSeq[i]+1);
}

printf(&quot;\nProcesses are being executed...\n\n&quot;);
sleep(1);

pthread_t processes[no_of_processes];
pthread_attr_t attr;
pthread_attr_init(&amp;attr);

int processNumber[no_of_processes];
for(int i=0; i&lt;no_of_processes; i++) processNumber[i] = i;

for(int i=0; i&lt;no_of_processes; i++)
pthread_create(&amp;processes[i], &amp;attr, p_code, (void *)(&amp;processNumber[i]));

for(int i=0; i&lt;no_of_processes; i++)
pthread_join(processes[i], NULL);

printf(&quot;\nAll Processes Finished\n&quot;);

free(resources);
for(int i=0; i&lt;no_of_processes; i++)
{
free(allocated[i]);
free(maxr[i]);
free(need[i]);

}
free(allocated);
free(maxr);
free(need);
free(safeSeq);
}

bool safaseq()
{

int r_temp[no_of_resources];
for(int i=0; i&lt;no_of_resources; i++)
r_temp[i] = resources[i];

bool finished[no_of_processes];
for(int i=0; i&lt;no_of_processes; i++)
finished[i] = false;

int nfinished=0;
while(nfinished &lt; no_of_processes) {
bool flag = false;

for(int i=0; i&lt;no_of_processes; i++) {
if(!finished[i]) {
bool pos = true;

for(int j=0; j&lt;no_of_resources; j++)
if(need[i][j] &gt; r_temp[j]) {
pos = false;
break;
}

if(pos) {
for(int j=0; j&lt;no_of_resources; j++)
r_temp[j] += allocated[i][j];
safeSeq[nfinished] = i;
finished[i] = true;
++nfinished;
flag = true;
}
}
}

if(!flag) {
for(int k=0; k&lt;no_of_processes; k++) safeSeq[k] = -1;
return false;
}
}
return true;
}
void* p_code(void *a)
{
int n = *((int *) a);

pthread_mutex_lock(&amp;lock);

while(n != safeSeq[ran])
pthread_cond_wait(&amp;cond, &amp;lock);

printf(&quot;\n--&gt; Process P%d&quot;, n);
printf(&quot;\n\tAllocated : &quot;);
for(int i=0; i&lt;no_of_resources; i++)
printf(&quot;%3d&quot;, allocated[n][i]);

printf(&quot;\n\tNeeded : &quot;);
for(int i=0; i&lt;no_of_resources; i++)
printf(&quot;%3d&quot;, need[n][i]);

printf(&quot;\n\tAvailable : &quot;);
for(int i=0; i&lt;no_of_resources; i++)
printf(&quot;%3d&quot;, resources[i]);

printf(&quot;\n&quot;);
sleep(1);

printf(&quot;\tThe Resource has been Allocated!&quot;);
printf(&quot;\n&quot;);
sleep(1);
printf(&quot;\tThe Process is Running...&quot;);
printf(&quot;\n&quot;); sleep(rand()%3 + 2);
printf(&quot;\tProcess Completed...&quot;);
printf(&quot;\n&quot;);
sleep(1);
printf(&quot;\tProcess Releasing Resource...&quot;);
printf(&quot;\n&quot;);
sleep(1);
printf(&quot;\tResources Released!&quot;);

for(int i=0; i&lt;no_of_resources; i++)
resources[i] += allocated[n][i];

printf(&quot;\n\tCurrentl Available : &quot;);
for(int i=0; i&lt;no_of_resources; i++)
printf(&quot;%3d&quot;, resources[i]);
printf(&quot;\n\n&quot;);

sleep(1);

ran++;
pthread_cond_broadcast(&amp;cond);
pthread_mutex_unlock(&amp;lock);
pthread_exit(NULL);
}

int main(int argc, char** argv)
{
srand(time(NULL));
printf(&quot;\nThis program is based on Banker&#39;s Algorithm using multithreading and mutex&quot;);
printf(&quot;\nEnter The Number of Processes&quot;);
scanf(&quot;%d&quot;, &amp;no_of_processes);

printf(&quot;\nEnter the Number of Resources &quot;);
scanf(&quot;%d&quot;, &amp;no_of_resources);
resources = (int *)malloc(no_of_resources * sizeof(*resources));
printf(&quot;\nResources that are available right now &quot;);
for(int i=0; i&lt;no_of_resources; i++)
scanf(&quot;%d&quot;, &amp;resources[i]);

allocated = (int **)malloc(no_of_processes * sizeof(*allocated));
for(int i=0; i&lt;no_of_processes; i++)
allocated[i] = (int )malloc(no_of_resources * sizeof(*allocated));

maxr = (int **)malloc(no_of_processes * sizeof(*maxr));
for(int i=0; i&lt;no_of_processes; i++)
maxr[i] = (int )malloc(no_of_resources * sizeof(*maxr));

// allocated
printf(&quot;\n&quot;);
for(int i=0; i&lt;no_of_processes; i++) {
printf(&quot;\nResource allocated to process %d &quot;, i+1);
for(int j=0; j&lt;no_of_resources; j++)
scanf(&quot;%d&quot;, &amp;allocated[i][j]);
}
printf(&quot;\n&quot;);

// maxrimum required resources
for(int i=0; i&lt;no_of_processes; i++)
{
printf(&quot;\nmaximum resource that is required by process %d &quot;, i+1);
for(int j=0; j&lt;no_of_resources; j++)
scanf(&quot;%d&quot;, &amp;maxr[i][j]);
}
printf(&quot;\n&quot;);
Need();
return 0;
}
